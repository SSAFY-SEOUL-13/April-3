import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;
//61072	520
public class Main_BJ_17281_야구 {
	static int max,N = 0;
	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
		N = Integer.parseInt(br.readLine());
		
		// r:각 이닝, c:선수 번호 -> 선수가 해당 이닝에 나왔을때 결과
		int [][] record = new int [N][10];
		
		for(int i=0;i<N;i++) {
			st = new StringTokenizer(br.readLine());
			for(int j=1;j<10;j++) {
				record[i][j]=Integer.parseInt(st.nextToken());
			}
		}
		
		// 1~9번타자까지의 순서 저장
		int memberlist[] = new int [10];
		//4번타자는 1번선수로 고정
		memberlist[4] = 1;
		// 위치의 고정여부
		boolean visit[] = new boolean[10];
		visit[4]=true;
		setmember(memberlist,2,record,visit);
		
		System.out.println(max);
		
	}
	
	static void setmember(int memberlist[], int idx, int [][] record,boolean visit[]) {
		if(idx==10) {
			// 정해진 순서로 점수시뮬을 돌림
//			System.out.println(Arrays.toString(memberlist));
			getscore(memberlist, record);
			
			return;
		}
		
		for(int i=1;i<10;i++) {
			//이미 선택된 것인 경우 생략
			if(visit[i])continue;
			//현재 위치에 해당 요소를 넣음(선택)
			memberlist[i]=idx;
			visit[i]=true;
			setmember(memberlist, idx+1, record, visit);
			visit[i]=false;
		}
	}
	static void getscore(int memberlist[], int [][] record) {
		int score=0;
		//선수인덱스(1~9)
		int idx=0;
		for(int in=0;in<N;in++) {
			//주자 초기화
			boolean []runner=new boolean [3];
			int outcount=0;
			while(outcount<3) {
				idx++;
				if(idx==10)idx=1;
				int hit = record[in][memberlist[idx]];
				switch (hit) {
				case 0:
					outcount++;
					break;
				case 1:
				case 2:
				case 3:
					score+=hitmove(runner,hit);
					break;
				case 4:
					for(int i=0;i<3;i++) {
						if(runner[i]) {
							score++;
							runner[i]=false;
						}
					}
					score++;
					break;
				}
			}//각이닝종료
		}//모든이닝종료
		
//		if(max<score) {
//			System.out.println("부분점수"+score);
//			System.out.println(Arrays.toString(memberlist));
//		}
		max = Math.max(score, max);
	}
	static int hitmove(boolean []runner, int hit) {
		int score=0;
		for(int i=2;i>=0;i--) {
			// 해당 위치에 러너가 있다면
			if(runner[i]) {
				//hit루타만큼 적용
				int tmp = i+hit;
				//득점되는 경우 점수 추가
				if(tmp>2)score++;
				//아닌경우 위치를 변경
				else {
					runner[tmp]=true;
				}
				//본래위치는 제거
				runner[i]=false;
			}
		}
		//진출자
		runner[hit-1]=true;
		return score;
	}
}
