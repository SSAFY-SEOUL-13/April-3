import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import java.util.StringTokenizer;
//**********************************
//283068	896
public class Main_BJ_14003_가장긴증가하는부분수열5 {

	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringBuilder sb = new StringBuilder();
		int N = Integer.parseInt(br.readLine());
		StringTokenizer st = new StringTokenizer(br.readLine());
		// 들어온 수열을 그대로 저장
		int arr[] = new int[N+1];
		for(int i=1;i<=N;i++) {
			arr[i] = Integer.parseInt(st.nextToken());
		}
		// 역추적을 위한 배열, 리스트의 몇번째 요소인지 확인해준다.
		int arridx[] = new int [N+1];
		// 수열을 저장한다. 중간에 바뀌더라도 이분탐색으로 그 중간부터 다시 넣는다.
		List<Integer> list = new ArrayList<>();
		list.add(Integer.MIN_VALUE);//0번index를 비워둔다.
		
		for(int i=1;i<=N;i++) {
			int num = arr[i];
			int left = 1;
			int right = list.size()-1;
			
			// 이번 숫자가 수열의 마지막보다 큰경우 수열에 포함시킴
			if(num>list.get(list.size()-1)) {
				list.add(num);
				arridx[i]=list.size()-1;
			}else {// 마지막 숫자보다 작은경우
				// 이분탐색으로 이번 숫자가 들어갈 위치를 찾는다.
				while(left<right) {
					
					int mid = (left+right)/2;
					if(list.get(mid)>=num)right=mid;
					else left =  mid+1;
				}
				// 해당 위치에 넣어주고 인덱스에 저장
				list.set(right, num);
				arridx[i]=right;
			}
		}
		// 길이 출력
		sb.append(list.size()-1).append("\n");
		
		Stack<Integer> stack = new Stack<>();
		
		int idx = list.size()-1;
		
		for(int i=N;i>0;i--) {
			// 옳은 값인가 확인
			if(arridx[i]==idx) {
				idx--;
				stack.push(arr[i]);
			}
		}
		while(!stack.isEmpty()) {
			sb.append(stack.pop()).append(" ");
		}
		System.out.println(sb);
	}
}
