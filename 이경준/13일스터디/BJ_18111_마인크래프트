import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main_BJ_18111_마인크래프트 {
//34488	584
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		StringTokenizer st = new StringTokenizer(br.readLine());
		
		int N = Integer.parseInt(st.nextToken());
		int M = Integer.parseInt(st.nextToken());
		int B = Integer.parseInt(st.nextToken());
		int min=Integer.MAX_VALUE,max=0;
		int land [] = new int [N*M];
		for(int i=0;i<N;i++) {
			st = new StringTokenizer(br.readLine());
			for(int j=0;j<M;j++) {
				land[i*M+j]=Integer.parseInt(st.nextToken());
				if(land[i*M+j]>max) max = land[i*M+j];
				if(land[i*M+j]<min) min = land[i*M+j];
			}
		}
		int anstime=Integer.MAX_VALUE;
		int ansheight=-1;
		// 예상되는 목표 층수(입력의 최소와 최대 사이)
		for(int i=min;i<=max;i++) {
			boolean flag=false;
			int time = 0;
			int blocks = B;
			// 모든 위치마다 목표층수에 맞춰서 작업
			for(int j=0;j<land.length;j++) {
				int diff = land[j]-i;
				if(diff>0) {// 더 높을때(제거작업)
					time += Math.abs(diff)*2;
					blocks +=Math.abs(diff);
				}else if(diff<0){// 더 낮을때 (추가작업)
					time += Math.abs(diff);
					blocks -=Math.abs(diff);
				}
				//도중에 이전까지한것보다 시간이 넘친다면
				if(time>anstime) {
					flag=true;
					break;
				}
			}
			// 넘친다면 다음것 시작
			if(flag)continue;
			// 가능하다고 시간이 전보다 효율적이라면
			if(blocks>=0&&time<=anstime) {
				anstime = time;
				ansheight=i;
			}
		}
		
		System.out.println(anstime+" "+ansheight);
	}
}
