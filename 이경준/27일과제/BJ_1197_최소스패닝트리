import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.PriorityQueue;
import java.util.StringTokenizer;
//50752	564
public class Main_BJ_1197_최소스패닝트리 {
	static class edge implements Comparable<edge>{
		int a,b,w;

		public edge(int a, int b, int w) {
			super();
			this.a = a;
			this.b = b;
			this.w = w;
		}

		@Override
		public int compareTo(edge o) {
			// TODO Auto-generated method stub
			return this.w-o.w;
		}
		
	}
	
	static void union(int a, int b) {
		int aR = find(a);
		int bR = find(b);
		if(aR!=bR) {
			parent[aR]=b;
		}
	}
	static int find(int a) {
		if(a==parent[a])return a;
		parent[a]=find(parent[a]);
		return parent[a];
	}
	static int [] parent;
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		StringTokenizer st = new StringTokenizer(br.readLine());
		
		int V = Integer.parseInt(st.nextToken());
		int E = Integer.parseInt(st.nextToken());
		
		parent = new int [V+1];
		
		for(int i=0;i<=V;i++) {
			parent[i]=i;
		}

		
		PriorityQueue<edge> pq = new PriorityQueue<>();
		for(int i=0;i<E;i++) {
			st = new StringTokenizer(br.readLine());
			pq.add(new edge(Integer.parseInt(st.nextToken()), 
							Integer.parseInt(st.nextToken()),
							Integer.parseInt(st.nextToken())));
		}
		
		int ans = 0;
		while(!pq.isEmpty()) {
			edge cur = pq.poll();
			
			int a = find(cur.a);
			int b = find(cur.b);
			
			if(a==b)continue;
			
			union(a, b);
			ans += cur.w;
		}
		
		System.out.println(ans);
	}
}
